/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'luke' at '11/17/16 2:19 PM' with Gradle 3.0
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.4.2.RELEASE'
	}
}

plugins {
	id 'org.flywaydb.flyway' version '4.0.3'
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'scala'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    maven {
    	url "http://repo.akka.io/snapshots/"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8 

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR2"
	}
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.springframework.boot:spring-boot:1.4.2.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
	compile 'org.apache.commons:commons-dbcp2:2.1.1'    
    compile 'org.springframework.cloud:spring-cloud-starter-bus-kafka'
    compile 'org.postgresql:postgresql:9.4.1212.jre7'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

tasks.withType(ScalaCompile) {
  scalaCompileOptions.metaClass.useAnt = false
}

dependencies {
	compile group: 'org.scala-lang', name: 'scala-library', version: '2.11.8'
	compile 'com.typesafe.akka:akka-actor_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-agent_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-camel_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-cluster_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-cluster-metrics_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-cluster-sharding_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-cluster-tools_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-contrib_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-multi-node-testkit_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-osgi_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-persistence_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-persistence-tck_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-remote_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-slf4j_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-stream_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-stream-testkit_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-testkit_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-distributed-data-experimental_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-typed-experimental_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-persistence-query-experimental_2.11:2.4.12'
	compile 'com.typesafe.akka:akka-http-core_2.11:2.4.11'
	compile 'com.typesafe.akka:akka-http-experimental_2.11:2.4.11'
	compile 'com.typesafe.akka:akka-http-jackson-experimental_2.11:2.4.11'
	compile 'com.typesafe.akka:akka-http-spray-json-experimental_2.11:2.4.11'
	compile 'com.typesafe.akka:akka-http-testkit_2.11:2.4.11'
	compile 'com.typesafe.akka:akka-http-xml-experimental_2.11:2.4.11'
}

flyway {
	url = 'jdbc:postgresql://localhost:5432/rule_action'
	user = 'luke'
	password = '29597808'
}
